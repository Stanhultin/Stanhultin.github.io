geom_text(aes(y = mean, label = Country), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Month', x='', y='Total Number of Deaths', fill='Country')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(month)+
ease_aes("cubic-in-out")
animate(b1, nframes = 400, fps = 10)
library(tweenr)
animate(b1, nframes = 400, fps = 10)
install.packages('gganimate')
install.packages("gganimate")
install.packages('gifski')
knitr::opts_chunk$set(message = FALSE)
ggplot(d1, aes(x=Country,
y=mean,
fill=mean)) +
geom_col()+
ylim(0, 25000)+
transition_states(month)+
labs(title = 'Mean: {closest_state}')
ggplot(d1, aes(x=Country,
y=mean,
fill=mean)) +
geom_col()+
ylim(0, 25000)+
transition_states(month)+
labs(title = 'Mean: {closest_state}')
knitr::opts_chunk$set(message = FALSE)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(knitr)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df$month <- df$Date_reported
d1 <- df %>% group_by(month, Country) %>% summarise(mean=mean(Cumulative_deaths))
d2 <- d1 %>% group_by(month) %>% mutate(rank=rank(-mean)) %>% ungroup()
d3 <- d2 %>% filter(rank <= 10)
b1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=Country, fill=Country, label=Country)) + geom_col()+
geom_text(aes(y = mean, label = Country), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Month', x='', y='Total Number of Deaths', fill='Country')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(month)+
ease_aes("cubic-in-out")
animate(b1, nframes = 100, fps = 10)
ggplot(d1, aes(x=Country,
y=mean,
fill=mean)) +
geom_col()+
ylim(0, 25000)+
transition_states(month)+
labs(title = 'Mean: {closest_state}')
ggplot(d1, aes(x=Country,
y=month,
fill=mean)) +
geom_col()+
ylim(0, 25000)+
transition_states(month)+
labs(title = 'Month: {closest_state}')
knitr::opts_chunk$set(message = FALSE)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
library(tidyverse)
library(tidyverse)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
filter(Date_reported,False)
arrange(-Cumulative_deaths)
df
date
df$Country_code
df %>%
filter(state %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=date,
color=state))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = positive),
hjust = -.1, size=5) +
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=date,
color=state))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = positive),
hjust = -.1, size=5) +
transition_reveal(date)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(knitr)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=date,
color=state))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = positive),
hjust = -.1, size=5) +
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=date,
color=state))+
geom_line()+
geom_point(size=3)+
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=state))+
geom_line()+
geom_point(size=3)+
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=state))+
geom_line()+
geom_point(size=3)+
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=state))+
geom_line()+
geom_point(size=3)+
transition_reveal(Date_reported)
df %>%
filter(Country_code %in% c('US','BR','CN')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(Date_reported)
death_per_cases <- df(Cumulative_death/Cumulative_cases)
death_per_cases <- df(Cumulative_deaths/Cumulative_cases)
death_per_cases <- df(Cumulative_deaths/Cumulative_cases)
death_per_cases <- (Cumulative_deaths/Cumulative_cases)
death_per_cases <- (Cumulative_deaths/Cumulative_cases)
death_per_cases <- (Cumulative_deaths/Cumulative_cases)
df$death_per_cases <- (df$Cumulative_deaths/df$Cumulative_cases)
df$death_per_cases
df$death_per_cases <- (df$Cumulative_deaths/df$Cumulative_cases)
df %>%
filter(Country_code %in% c('US','IT','MX')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(Date_reported)
df %>%
filter(death_per_cases %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(Date_reported)
df %>%
filter(death_per_cases %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=death_per_cases,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(Date_reported)
df %>%
filter(Country_code %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(Date_reported)
knitr::opts_chunk$set(message = FALSE)
model3 <- train(diabetes~., data=df_train,
method = "rf",
ntree = 2000)
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(rpart)
tree_model <- rpart(diabetes ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
library(randomForest)
forest_model = randomForest(diabetes ~ ., data=df_train, ntree = 500)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "1")
pred
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(rpart)
tree_model <- rpart(diabetes ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
library(randomForest)
forest_model = randomForest(diabetes ~ ., data=df_train, ntree = 500)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
importance(forest_model)
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test, positive = "pos")
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
model4 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
model4 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(rpart)
tree_model <- rpart(diabetes ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
library(randomForest)
forest_model = randomForest(diabetes ~ ., data=df_train, ntree = 500)
forest_model = randomForest(diabetes ~ ., data=df_train, ntree = 500)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
importance(forest_model)
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
model2 <- train(diabetes~., data= df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
model3 <- train(diabetes~., data=df_train,
method = "rf",
ntree = 2000)
model3 <- train(diabetes~., data=df_train,
method = "rf",
ntree = 2000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
model5 <- train(diabetes~., data=df_train,
method = "rpart2",
maxdepth=3)
pred <- predict(model1, df_test)
pred <- predict(model5, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
varImp(model4)
varImp(model5)
varImp(model5)
varImp(model4)
varImp(model5)
varImp(model5)
knitr::opts_chunk$set(message = FALSE)
trControl = trainControl(method = "cv",
number = 10)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
ranger_cv <- train(diabetes~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(ranger_cv)
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(mtry = 1:4)
trControl = trainControl(method = "cv",
number = 30)
forest_cv <- train(diabetes~., data=df_train,
method = "rf",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_cv)
trControl = trainControl(method = "cv",
number = 10)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
ranger_cv <- train(diabetes~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(ranger_cv)
getModelInfo('adaboost')$ranger$parameters
getModelInfo('adaboost')$adaboost$parameters
adaboost_cv <- train(diabetes~., data=df_train,
method = "adaboost")
plot(adaboost_cv)
trControl = trainControl(method = "cv",
number = 10)
adaboost_cv <- train(diabetes~., data=df_train,
method = "adaboost",
trControl = trControl)
adaboost_cv <- train(diabetes~., data=df_train,
method = "adaboost",
trControl = trControl)
``
results <- resamples(list(forest = forest_cv,
ranger = ranger_cv,
adaboost= adaboost_cv))
bwplot(results)
results <- resamples(list(forest = forest_cv,
ranger = ranger_cv,
adaboost= adaboost_cv))
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(mtry = 1:4)
trControl = trainControl(method = "cv",
number = 30)
forest_cv <- train(diabetes~., data=df_train,
method = "rf",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_cv)
trControl = trainControl(method = "cv",
number = 30)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
ranger_cv <- train(diabetes~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(ranger_cv)
getModelInfo('adaboost')$adaboost$parameters
trControl = trainControl(method = "cv",
number = 30)
adaboost_cv <- train(diabetes~., data=df_train,
method = "adaboost",
trControl = trControl)
plot(adaboost_cv)
results <- resamples(list(forest = forest_cv,
ranger = ranger_cv,
adaboost= adaboost_cv))
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(mtry = 1:4)
trControl = trainControl(method = "cv",
number = 10)
forest_cv <- train(diabetes~., data=df_train,
method = "rf",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_cv)
trControl = trainControl(method = "cv",
number = 10)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
ranger_cv <- train(diabetes~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(ranger_cv)
getModelInfo('adaboost')$adaboost$parameters
trControl = trainControl(method = "cv",
number = 10)
adaboost_cv <- train(diabetes~., data=df_train,
method = "adaboost",
trControl = trControl)
plot(adaboost_cv)
results <- resamples(list(forest = forest_cv,
ranger = ranger_cv,
adaboost= adaboost_cv))
bwplot(results)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(mtry = 1:4)
trControl = trainControl(method = "cv",
number = 10)
forest_cv <- train(diabetes~., data=df_train,
method = "rf",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_cv)
trControl = trainControl(method = "cv",
number = 10)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
ranger_cv <- train(diabetes~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(ranger_cv)
getModelInfo('adaboost')$adaboost$parameters
trControl = trainControl(method = "cv",
number = 10)
adaboost_cv <- train(diabetes~., data=df_train,
method = "adaboost",
trControl = trControl)
plot(adaboost_cv)
results <- resamples(list(forest = forest_cv,
ranger = ranger_cv,
adaboost= adaboost_cv))
bwplot(results)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(mtry = 1:4)
trControl = trainControl(method = "cv",
number = 10)
forest_cv <- train(diabetes~., data=df_train,
method = "rf",
trControl = trControl,
tuneGrid = tuneGrid)
